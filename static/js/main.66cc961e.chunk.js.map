{"version":3,"sources":["components/Loading/Loading.js","components/Cards/Cards.js","api/index.js","components/Charts/Charts.js","components/Heading/Heading.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","components/Loading/Loading.module.css"],"names":["Loading","className","styles","Cards","props","datas","data","undefined","confirmed","console","log","recovered","deaths","lastUpdate","Row","id","Date","toDateString","Card","Body","Title","Text","start","end","value","duration","separator","url","fetchData","country","a","newUrl","axios","get","modifiedData","fetchDailyData","map","dailydata","total","date","reportDate","countryList","countries","name","Charts","useState","dailyData","setDailyData","useEffect","fetchApi","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","Heading","CountryPicker","handle","handlecountry","fetchcountries","setfetchedcountries","fetchedcountries","Form","Group","as","Col","Label","Control","defaultValue","onChange","e","target","index","key","App","handleCountry","countryFetchData","setState","state","fetchedData","this","Container","xs","lg","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"iWAGe,SAASA,IACpB,OACI,yBAAKC,UAAWC,IAAOF,UCChB,SAASG,EAAMC,GAC1B,IAAMC,EAAQD,EAAME,KAEpB,QAAuBC,IAApBF,EAAMG,UAEL,OADAC,QAAQC,IAAI,WACL,kBAACV,EAAD,MALsB,IAO1BQ,EAA4CH,EAA5CG,UAAWG,EAAiCN,EAAjCM,UAAWC,EAAsBP,EAAtBO,OAAQC,EAAcR,EAAdQ,WAErC,OACI,yBAAKZ,UAAU,kBACV,kBAACa,EAAA,EAAD,KACG,uBAAGb,UAAU,gBAAb,iBAEJ,kBAACa,EAAA,EAAD,CAAKb,UAAU,GAAGc,GAAG,eACrB,uBAAGd,UAAU,gBAAb,IAA8B,IAAIe,KAAKH,GAAYI,iBAG/C,kBAACH,EAAA,EAAD,CAAKb,UAAU,WACX,kBAACiB,EAAA,EAAD,CAAMjB,UAAU,cAAcc,GAAG,kBAC7B,kBAACG,EAAA,EAAKC,KAAN,KACA,kBAACD,EAAA,EAAKE,MAAN,kBACA,kBAACF,EAAA,EAAKG,KAAN,KACI,2BAAG,kBAAC,IAAD,CACCC,MAAO,EACPC,IAAKf,EAAUgB,MACfC,SAAU,EACVC,UAAU,QAGlB,kBAACR,EAAA,EAAKG,KAAN,KACI,2BAAOpB,UAAU,cAAjB,0CAKZ,kBAACa,EAAA,EAAD,CAAKb,UAAU,WACX,kBAACiB,EAAA,EAAD,CAAMjB,UAAU,cAAcc,GAAG,kBAC7B,kBAACG,EAAA,EAAKC,KAAN,KACA,kBAACD,EAAA,EAAKE,MAAN,kBACA,kBAACF,EAAA,EAAKG,KAAN,KACA,2BAAG,kBAAC,IAAD,CACKC,MAAO,EACPC,IAAKZ,EAAUa,MACfC,SAAU,EACVC,UAAU,QAGlB,kBAACR,EAAA,EAAKG,KAAN,KACI,2BAAOpB,UAAU,cAAjB,6CAKZ,kBAACa,EAAA,EAAD,CAAKb,UAAU,WACX,kBAACiB,EAAA,EAAD,CAAMjB,UAAU,cAAcc,GAAG,eAC7B,kBAACG,EAAA,EAAKC,KAAN,KACA,kBAACD,EAAA,EAAKE,MAAN,eACA,kBAACF,EAAA,EAAKG,KAAN,KACI,2BAAG,kBAAC,IAAD,CACCC,MAAO,EACPC,IAAKX,EAAOY,MACZC,SAAU,EACVC,UAAU,QAGd,2BAAOzB,UAAU,cAAjB,yC,6BCtEtB0B,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,6DAEjBC,EAASJ,EAGTI,OADWxB,IAAZsB,EACUF,EAEH,UAAMA,EAAN,sBAAuBE,GAPZ,kBAiCmDG,IAAMC,IAAIF,GAjC7D,2BAiCTzB,KAAQE,EAjCC,EAiCDA,UAAWG,EAjCV,EAiCUA,UAAWC,EAjCrB,EAiCqBA,OAAQC,EAjC7B,EAiC6BA,WACxCqB,EAAe,CAAC1B,YAAWG,YAAWC,SAAQC,cAlCnC,kBAmCVqB,GAnCU,2DAsCV,gCAtCU,0DAAH,sDA0CTC,EAAc,uCAAG,gCAAAL,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEfrB,EAFe,EAEfA,KAED4B,EAAe5B,EAAK8B,KAAI,SAACC,GAAD,MAAc,CACxC7B,UAAW6B,EAAU7B,UAAU8B,MAC/B1B,OAAQyB,EAAUzB,OAAO0B,MACzBC,KAAMF,EAAUG,eAPE,kBAUfN,GAVe,yDAYf,gCAZe,yDAAH,qDAgBdO,EAAW,uCAAG,8BAAAX,EAAA,+EAEeE,IAAMC,IAAN,UAAaN,EAAb,eAFf,uBAELe,EAFK,EAEZpC,KAAOoC,UAFK,kBAGZA,EAAUN,KAAI,SAACP,GAAD,OAAWA,EAAQc,SAHrB,yDAKZ,gCALY,yDAAH,qD,QCzDT,SAASC,EAAOxC,GAAQ,IAAD,EAEKA,EAAME,KAAtCE,EAF2B,EAE3BA,UAAWG,EAFgB,EAEhBA,UAAWC,EAFK,EAELA,OACvBiB,EAAUzB,EAAMyB,QAHY,EAKCgB,mBAAS,IALV,mBAK3BC,EAL2B,KAKfC,EALe,KAelC,GARAC,qBAAU,YACQ,uCAAG,sBAAAlB,EAAA,kEACbiB,EADa,SACOZ,IADP,6EAAH,qDAIdc,KACF,SAEe1C,IAAdC,EACC,OAAO,kBAACR,EAAD,MAGXS,QAAQC,IAAIF,EAAUgB,MAAMb,EAAUa,MAAMZ,EAAOY,OAEnD,IAAM0B,EACF1C,EAAc,kBAAC,IAAD,CACVF,KAAM,CACF6C,OAAQ,CAAC,YAAa,YAAa,UACnCC,SAAU,CAAC,CACPC,MAAO,SACPC,gBAAiB,CAAC,oBAAoB,mBAAmB,oBACzDhD,KAAM,CAACE,EAAUgB,MAAMb,EAAUa,MAAMZ,EAAOY,UAItD+B,QAAS,CACLC,OAAQ,CAACC,SAAQ,GACjBC,MAAO,CAACD,SAAS,EAAME,KAAK,oBAAD,OAAsB9B,OAEnD,KAGJ+B,EACFd,EAAU,GAAM,kBAAC,IAAD,CACZxC,KAAM,CACF6C,OAAQL,EAAUV,KAAI,qBAAEG,QACxBa,SAAU,CACN,CACI9C,KAAMwC,EAAUV,KAAI,qBAAE5B,aACtB2C,OAAQ,YACRU,YAAa,SACbC,MAAM,GACZ,CACExD,KAAMwC,EAAUV,KAAI,qBAAExB,UACtBuC,OAAQ,SACRU,YAAa,mBACbP,gBAAiB,sBACjBQ,MAAM,OAGZ,KAGV,OACI,6BACKjC,EAAUqB,EAAWU,G,OChEnB,SAASG,IACpB,OACI,yBAAK9D,UAAU,QACX,wBAAIA,UAAU,cAAcc,GAAG,WAAU,yCAAiB,kD,4BCFvD,SAASiD,EAAc5D,GAElC,IAAM6D,EAAS7D,EAAM8D,cAFoB,EAIKrB,mBAAS,IAJd,mBAIlCsB,EAJkC,KAIlBC,EAJkB,KAezC,OATIpB,qBAAU,YACgB,uCAAG,sBAAAlB,EAAA,kEACrBsC,EADqB,SACK3B,IADL,6EAAH,qDAGtB4B,KACF,IAEF5D,QAAQC,IAAIyD,GAGZ,6BACI,kBAACG,EAAA,EAAKC,MAAN,CAAYC,GAAIC,KACZ,kBAACH,EAAA,EAAKI,MAAN,eACA,kBAACJ,EAAA,EAAKK,QAAN,CAAc5D,GAAG,cAAcyD,GAAG,SAASI,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOb,EAAOa,EAAEC,OAAOvD,SACxF,4BAAQA,MAAM,IAAd,UACC2C,EAAe/B,KAAI,SAACP,EAAQmD,GAAT,OAAkB,4BAAQC,IAAKD,EAAOxD,MAAOK,GAAUA,S,oBCwChFqD,E,kDAtDb,WAAY9E,GAAQ,IAAD,8BACjB,cAAMA,IAgBR+E,cAjBmB,uCAiBH,WAAOtD,GAAP,iBAAAC,EAAA,yDAED,KAAVD,EAFW,gCAGkBD,IAHlB,cAGNwD,EAHM,OAIX,EAAKC,SAAS,CAAC/E,KAAK8E,EAAiBvD,QAAQ,KAJlC,0CAOiBD,EAAUC,GAP3B,OAORuD,EAPQ,OAUd,EAAKC,SAAS,CACZ/E,KAAM8E,EACNvD,QAASA,IAZG,4CAjBG,sDAGjB,EAAKyD,MAAQ,CACVhF,KAAM,GACNuB,QAAS,IALK,E,gMAWSD,I,OAApB2D,E,OACNC,KAAKH,SAAS,CACZ/E,KAAMiF,I,qIAsBR,OACE,yBAAKtF,UAAU,YACb,kBAACwF,EAAA,EAAD,KAAW,kBAAC,EAAD,MACT,kBAAC3E,EAAA,EAAD,CAAKb,UAAU,sBACb,kBAACwE,EAAA,EAAD,CAAKiB,GAAI,GAAIC,GAAI,GACf,kBAAC,EAAD,CAAOrF,KAAMkF,KAAKF,MAAMhF,QAE1B,kBAACmE,EAAA,EAAD,CAAKiB,GAAI,GAAIC,GAAI,GAEf,kBAAC,EAAD,CAAezB,cAAesB,KAAKL,gBACnC,kBAACvC,EAAD,CAAQtC,KAAMkF,KAAKF,MAAMhF,KAAMuB,QAAS2D,KAAKF,MAAMzD,kB,GA/C/C+D,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrG,QAAQqG,MAAMA,EAAMC,a,mBExI5BC,EAAOC,QAAU,CAAC,QAAU,2B","file":"static/js/main.66cc961e.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './Loading.module.css'\n\nexport default function Loading() {\n    return (\n        <div className={styles.Loading}>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport { Card, Row } from 'react-bootstrap';\nimport CountUp from 'react-countup'\nimport './Cards.css'\nimport Loading from '../Loading/Loading';\n\nexport default function Cards(props) {\n    const datas = props.data    \n    \n    if(datas.confirmed === undefined){\n        console.log(\"loading\")\n        return <Loading/>\n    }\n    const {confirmed, recovered, deaths, lastUpdate} = datas\n\n    return (\n        <div className=\"allcards my-0 \">\n             <Row>\n                <p className=\"mx-auto my-0\"> Last Update</p>\n                </Row>\n            <Row className=\"\" id=\"lastupdated\">\n            <p className=\"mx-auto my-0\"> {new Date(lastUpdate).toDateString()}</p>\n                </Row>\n               \n                <Row className=\"mx-auto\">\n                    <Card className=\"text-center\" id=\"confirmed-card\">\n                        <Card.Body>\n                        <Card.Title>Confirmed</Card.Title>\n                        <Card.Text>\n                            <b><CountUp \n                                start={0}\n                                end={confirmed.value}\n                                duration={2}\n                                separator=\",\"\n                                /></b>\n                            </Card.Text>\n                        <Card.Text>\n                            <small className=\"text-muted\">Number of active cases of COVID-19</small>\n                        </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </Row>\n                <Row className=\"mx-auto\">\n                    <Card className=\"text-center\" id=\"recovered-card\">\n                        <Card.Body>\n                        <Card.Title>Recovered</Card.Title>\n                        <Card.Text>\n                        <b><CountUp \n                                start={0}\n                                end={recovered.value}\n                                duration={2}\n                                separator=\",\"\n                               /></b>\n                            </Card.Text>\n                        <Card.Text>\n                            <small className=\"text-muted\">Number of recovered cases of COVID-19</small>\n                        </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </Row>\n                <Row className=\"mx-auto\">\n                    <Card className=\"text-center\" id=\"deaths-card\">\n                        <Card.Body>\n                        <Card.Title>Deaths</Card.Title>\n                        <Card.Text>\n                            <b><CountUp \n                                start={0}\n                                end={deaths.value}\n                                duration={2}\n                                separator=\",\"\n                                /></b>\n                            </Card.Text>         \n                            <small className=\"text-muted\">Number of death cases of COVID-19</small>\n                        </Card.Body>\n                    </Card>\n                </Row>\n                \n        </div>\n    )\n}\n","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n\n    let newUrl = url\n\n    if(country === undefined){\n        newUrl = url\n    }else{\n        newUrl = `${url}/countries/${country}`\n    }\n    try {\n        \n        // ------------Method 1 ---------------\n        // const response = await axios.get(url)\n        // const data = response.data\n        // const modifiedData = {\n        //     confirmed : data.confirmed,\n        //     recovered : data.recovered,\n        //     deaths : data.deaths,\n        //     lastUpdated : data.lastUpdate,     \n        // }\n        // return modifiedData\n\n        // ------------Method 2 ---------------\n        // const {data} = await axios.get(url)\n        // const responseData = {\n        //     confirmed : data.confirmed,\n        //     recovered : data.recovered,\n        //     deaths : data.deaths,\n        //     lastUpdated : data.lastUpdate,\n        // }            \n        // return responseData\n\n        // ------------Method 3 ----------------\n        const { data : {confirmed, recovered, deaths ,lastUpdate} } = await axios.get(newUrl)\n        const modifiedData = {confirmed, recovered, deaths ,lastUpdate}\n        return modifiedData\n        \n    } catch (error) {\n        return \"Error - something went wrong\"\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const {data} = await axios.get(`${url}/daily`)\n        \n        const modifiedData = data.map((dailydata)=>({\n            confirmed: dailydata.confirmed.total,\n            deaths: dailydata.deaths.total,\n            date: dailydata.reportDate,\n        }))\n\n        return modifiedData\n    } catch (error) {\n        return \"Error - something went wrong\"    \n    }\n} \n\nexport const countryList = async () =>{\n    try {\n        const {data: {countries}} = await axios.get(`${url}/countries`)\n        return countries.map((country)=>country.name)\n    } catch (error) {\n        return \"Error - something went wrong\"\n    }\n}","import React, { useState , useEffect } from 'react'\nimport {fetchDailyData} from '../../api/'\nimport { Line, Bar } from 'react-chartjs-2'\nimport Loading from '../../components/Loading/Loading'\n\nexport default function Charts(props) {\n    \n    const {confirmed, recovered, deaths} = props.data\n    const country = props.country\n\n    const [dailyData , setDailyData] = useState({}) \n\n    useEffect(()=>{\n        const fetchApi = async ()=>{\n            setDailyData( await fetchDailyData())\n        }\n        \n        fetchApi()\n    },[])\n\n    if(confirmed === undefined){\n        return <Loading/>\n    }\n\n    console.log(confirmed.value,recovered.value,deaths.value)\n\n    const barChart = (\n        confirmed ? ( <Bar \n            data={{\n                labels: ['Confirmed', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'People',\n                    backgroundColor: ['rgb(155, 90, 155)','rgb(34, 153, 34)','rgb(216, 66, 66)'],\n                    data: [confirmed.value,recovered.value,deaths.value]\n                }],\n                \n            }}\n            options={{\n                legend: {display:false},\n                title: {display: true, text: `Current stats in ${country}`}\n            }}\n        />) : null\n    )\n\n    const lineChart = (\n        dailyData[0] ? (<Line\n            data={{\n                labels: dailyData.map(({date}) => date),\n                datasets: [\n                    {\n                        data: dailyData.map(({confirmed})=> confirmed),\n                        labels: \"Confirmed\",\n                        borderColor: \"purple\",\n                        fill: true\n                },{\n                    data: dailyData.map(({deaths})=> deaths),\n                    labels: \"Deaths\",\n                    borderColor: \"rgb(216, 66, 66)\",\n                    backgroundColor: 'rgb(216, 66, 66,.5)',\n                    fill: true\n                }]\n            }}\n        />) : null\n    )\n\n    return (\n        <div>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n","import React from 'react'\nimport './Heading.css'\n\nexport default function Heading() {\n    return (\n        <div className=\"py-4\">\n            <h2 className=\"text-center\" id=\"heading\"><b>COVID - 19</b><small> Live Tracker</small></h2>\n        </div>\n    )\n}\n","import React, {useEffect , useState} from 'react'\nimport {Form ,Col} from 'react-bootstrap'\nimport { countryList } from '../../api'\nimport './CountryPicker.css'\nexport default function CountryPicker(props) {\n    \n    const handle = props.handlecountry\n    \n    const [fetchcountries, setfetchedcountries] = useState([])\n\n        useEffect(()=>{\n            const fetchedcountries = async () => {\n                setfetchedcountries(await countryList())\n            }\n            fetchedcountries()\n        },[])\n\n        console.log(fetchcountries)\n\n    return (\n        <div>\n            <Form.Group as={Col} >\n                <Form.Label>Select</Form.Label>\n                <Form.Control id=\"formcontrol\" as=\"select\" defaultValue=\"\" onChange={(e) => handle(e.target.value)}>\n                    <option value=\"\">Global</option>\n                    {fetchcountries.map((country,index)=> <option key={index} value={country}>{country}</option>)}\n                </Form.Control>\n            </Form.Group>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport Cards from './components/Cards/Cards'\nimport Charts from './components/Charts/Charts'\nimport Heading from './components/Heading/Heading'\nimport CountryPicker from './components/CountryPicker/CountryPicker'\nimport { fetchData } from './api'\nimport './App.css'\nimport { Row, Container,Col } from 'react-bootstrap'\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       data: {},\n       country: ''\n    }\n  }\n  \n\n  async componentDidMount(){\n    const fetchedData = await fetchData()\n    this.setState({\n      data: fetchedData\n    })\n  }   \n\n  handleCountry = async (country) => {\n    \n    if(country===''){\n      const countryFetchData= await fetchData()\n       this.setState({data:countryFetchData,country:''})\n       return;\n     }\n    const countryFetchData = await fetchData(country) \n    // fetch country\n\n    this.setState({\n      data: countryFetchData,\n      country: country\n    })\n\n  }\n  \n  render() {\n    return (\n      <div className=\"App py-3\">\n        <Container><Heading/>\n          <Row className=\"align-items-center\">\n            <Col xs={12} lg={3}>\n              <Cards data={this.state.data} />\n            </Col>\n            <Col xs={12} lg={9}>\n              \n              <CountryPicker handlecountry={this.handleCountry}/>\n              <Charts data={this.state.data} country={this.state.country}/>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading\":\"Loading_Loading__2QGVy\"};"],"sourceRoot":""}